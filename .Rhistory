var.u=5
var.epsilon=0.3
var.e=0.1
z=rnorm(nobs,mean=2,sd=sqrt(var.z))
u=rnorm(nobs,mean=-1,sd=var.u)
x=rnorm(nobs,mean=g0+g1*z+g2*u,sd=sqrt(var.epsilon))
y=rnorm(nobs,mean=b0+b1*x+b2*u,sd=sqrt(var.e))
res=lm(y~x)
res$coefficients[2]
#get IV
tmp=lm(y~z)
slope.yz=tmp$coefficient[2]
tmp=lm(x~z)
slope.xz=tmp$coefficient[2]
slope.yz/slope.xz
nparam=10
nobs=1000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
cor(xmat)
nparam=10
nobs=10000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
round(cor(xmat),2)
rm(list=ls(all=TRUE))
set.seed(8)
nparam=10
nobs=10000
xmat=matrix(NA,nobs,nparam)
xmat[,1]=rnorm(nobs,mean=0,sd=1)
for (i in 2:nparam){
xmat[,i]=rnorm(nobs,mean=xmat[,i-1],sd=1)
}
round(cor(xmat),2)
#standardize
med1=apply(xmat,2,mean)
sd1=apply(xmat,2,sd)
xmat1=xmat
for (i in 1:nparam){
xmat1[,i]=(xmat[,i]-med1[i])/sd1[i]
}
k=qr(xmat)
str(k)
?qr
Q=qr.Q(k)
R=qr.R(k)
k=qr(xmat)
Q=qr.Q(k)
R=qr.R(k)
plot(xmat,Q%*%R)
unique(xmat-(Q%*%R))
hist(xmat-(Q%*%R))
round(cor(Q),2)
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=10
harvest=target/(1-degrad)
plot(degrad,harvest)
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=10
harvest=target/(1-degrad)
plot(degrad,harvest,type='l')
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,100)
plot(NA,NA,xlim=c(0,100),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,100)
plot(NA,NA,xlim=c(0,1),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(0,1),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(0,1),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(0,harvest[1],target,col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(-0.1,1),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(0,harvest[1],target,col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(-0.1,1),ylim=c(0,100))
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(x=0,y=harvest[1],target[i],col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(-0.1,1),ylim=c(0,100),xlim='Degradation',ylim='Harvest')
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(x=0,y=harvest[1],target[i],col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
target=c(1,5,10,20)
plot(NA,NA,xlim=c(-0.1,1),ylim=c(0,100),xlab='Degradation',ylab='Harvest')
for (i in 1:length(target)){
harvest=target[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(x=0,y=harvest[1],target[i],col=i)
}
rm(list=ls(all=TRUE))
degrad=seq(from=0,to=1,length.out=100)
score=c(1,5,10,20)
plot(NA,NA,xlim=c(-0.1,1),ylim=c(0,100),xlab='Degradation',ylab='Harvest')
for (i in 1:length(score)){
harvest=score[i]/(1-degrad)
lines(degrad,harvest,col=i)
text(x=0,y=harvest[1],score[i],col=i)
}
x=seq(from=1,to=10,length.out=100)
b0=3
b1=1
y=rnorm(100,mean=b0+b1*x)
plot(x,y)
x=seq(from=1,to=10,length.out=100)
b0=3
b1=-1
y=rnorm(100,mean=b0+b1*x)
plot(x,y)
plot(x,y)
lines(x,b0+b1*x)
b0=-3
b1=1
y=rnorm(100,mean=b0+b1*x)
points(x,y,col='red')
x=seq(from=1,to=10,length.out=100)
b0=3
b1=-1
y=rnorm(100,mean=b0+b1*x)
plot(x,y,ylim=c(-8,5))
lines(x,b0+b1*x)
b0=-5
b1=1
y=rnorm(100,mean=b0+b1*x)
points(x,y,col='red')
b0=2
b1=-1
mig.time=seq(from=-2,to=2,length.out=100)
mean1=exp(b0+b1*mig.time)
plot(mig.time,mean1,type='l')
abline(v=-1.5,col='red')
lines(c(-2,-1.5),rep(32,2),col='blue')
#https://www.usgs.gov/centers/eros/science/usgs-eros-archive-landsat-archives-landsat-8-oli-operational-land-imager-and?qt-science_center_objects=0#qt-science_center_objects
ns.km=170 #north south
ew.km=183 #east west
m2=(ns.km*1000)*(183*1000)
pixel=30*30
#number of pixels
m2/pixel
niter=1000
sd.jump=0.1
a1=-1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1.store
}
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.1
a1=-1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1.store
}
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.1
a1=-1
a1.store=rep(NA,niter)
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.1
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1.store
}
warnings()
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.1
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(density(a1.store),type='l')
plot(a1.store,type='l')
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=1
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new)
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(a1.store,type='l')
plot(density(a1.store),type='l')
plot(a1.store,type='l')
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=2
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new) #reflect proposal if negative
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(a1.store,type='l')
rm(list=ls(all=TRUE))
set.seed(1)
#simulated data
nobs=100
a1=1
a2=2
x=rbeta(nobs,a1,a2)
log.target=function(a1,a2,x){
sum(dbeta(x,a1,a2,log=T))+dgamma(a1,0.5,0.5,log=T)+dgamma(a2,0.5,0.5,log=T)
}
#MH
niter=1000
sd.jump=0.0001
a1=0.1
a1.store=rep(NA,niter)
for (i in 1:niter){
a1.new=rnorm(1,mean=a1,sd=sd.jump)
a1.new=ifelse(a1.new<0,abs(a1.new),a1.new) #reflect proposal if negative
target.new=log.target(a1=a1.new,a2=a2,x=x)
target.old=log.target(a1=a1    ,a2=a2,x=x)
pthresh=exp(target.new-target.old)
if (runif(1)<pthresh) a1=a1.new
a1.store[i]=a1
}
plot(a1.store,type='l')
library(circular)
?dvonmises
data1 <- rvonmises(1000, circular(0), 10, control.circular=list(units="degrees"))
plot(data1)
ff <- function(x) dvonmises(x, mu=circular(pi), kappa=10)
curve.circular(ff, join=TRUE, xlim=c(-2.3, 1),
main="Density of a VonMises Distribution \n mu=pi, kappa=10")
x=seq(from=0,to=2*pi,length.out=1000)
y=dvonmises(x, mu=circular(pi), kappa=10)
plot(x,y)
x=seq(from=0,to=2*pi,length.out=1000)
y=dvonmises(x, mu=circular(2*pi*0.99), kappa=10)
plot(x,y)
plot(res$NBN,type='l')
?rnbinom
nobs=10000
n=3
mu=10
x=rnbinom(nobs,mu=mu,size=n)
p=n/(mu+n)
mean(x); mu
var(x); n*(1-p)/(p^2)
n=3
mu=10
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=3
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=25
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
p
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.1
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
n=0.01
mu=100
x=rnbinom(nobs,mu=mu,size=n)
x=x[x!=0]
p=n/(mu+n)
mean(x);
denom=(1-(p^n))
(1/denom)*mu
z=3
mu=2
sig2=2
dnorm(z,mean=mu,sd=sqrt(sig2),log=T)
dnorm(2*z,mean=2*mu,sd=2*sqrt(sig2),log=T)
e.star=3
mu=2
sig2=2
pnorm(e.star,mean=mu,sd=sqrt(sig2),log=T)
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
sig2=1
e=e.star/sqrt(sig2.star)
mu=mu.star/sqrt(sig2.star)
pnorm(e,mean=mu,sd=sqrt(sig2),log=T)
e.star=3
mu.star=2
sig2.star=2
pnorm(e.star,mean=mu.star,sd=sqrt(sig2.star))
sig2=1
e=e.star/sqrt(sig2.star)
mu=mu.star/sqrt(sig2.star)
pnorm(e,mean=mu,sd=sqrt(sig2))
rm(list=ls(all=TRUE))
set.seed(10)
#read important functions
setwd('U:\\GIT_models\\AC_mixed')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
