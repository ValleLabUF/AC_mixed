gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
plot(res$logl,type='l')
plot(res$phi,type='l')
set.seed(3)
#basic setup
n.tsegm=400
n.ac=5
n.grid=100
n=floor(runif(n.tsegm,min=10,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.ind.true=ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#generate theta
theta=matrix(NA,n.tsegm,n.ac)
for (i in 1:n.tsegm){
if (i< n.tsegm/2){ #pure thetas
theta[i,]=0
ind=sample(1:n.ac,size=1)
theta[i,ind]=1
}
if (i>= n.tsegm/2){
tmp=runif(n.ac)
theta[i,]=tmp/sum(tmp)
}
}
image(theta)
theta.true=theta
#distance decay parameter
phi.true=phi=0.1
#calculate probabilities associated with each n.ac
probs=matrix(NA,n.ac,n.grid)
for (i in 1:n.ac){
x2=(ac.coord$x[i]-grid.coord$x)^2
y2=(ac.coord$y[i]-grid.coord$y)^2
dist=sqrt(x2+y2)
tmp=exp(-phi*dist)
probs[i,]=tmp/sum(tmp)
}
#cluster membership and data
z=matrix(NA,n.tsegm,n.ac)
z.disagg=array(NA,dim=c(n.tsegm,n.grid,n.ac))
y=matrix(0,n.tsegm,n.grid)
for (i in 1:n.tsegm){
z[i,]=rmultinom(1,size=n[i],prob=theta[i,])
for (j in 1:n.ac){
z.disagg[i,,j]=rmultinom(1,size=z[i,j],prob=probs[j,])
y[i,]=y[i,]+z.disagg[i,,j]
}
}
z.true.disagg=z.disagg
image(y)
plot(res$phi,type='l')
abline(h=phi.true,col='red')
ntot=n.tsegm*n.ac*n.grid
z.estim=apply(res$z,c(1,3),sum)
z.true=apply(z.true.disagg,c(1,3),sum)
ordem=numeric()
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(tmp==max(tmp))
print(max(tmp))
ordem=c(ordem,ind)
}
plot(z.estim[,ordem],z.true)
ordem=numeric()
options(warn=0)
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(tmp==max(tmp))
print(max(tmp))
ordem=c(ordem,ind)
}
plot(z.estim[,ordem],z.true)
ordem=numeric()
options(warn=0)
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(tmp==max(tmp))
print(max(tmp))
ordem=c(ordem,ind)
}
ordem
ordem=numeric()
options(warn=0)
i=1
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
warnings(0)
tmp
ordem=numeric()
options(warn=0)
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(!is.na(tmp) & tmp==max(tmp))
print(max(tmp))
ordem=c(ordem,ind)
}
plot(z.estim[,ordem],z.true)
ordem
rm(list=ls(all=TRUE))
set.seed(15)
#read important functions
setwd('U:\\GIT_models\\AC_mixed')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
plot(res$logl,type='l')
plot(res$phi,type='l')
plot(res$logl,type='l')
plot(res$phi,type='l')
set.seed(3)
#basic setup
n.tsegm=400
n.ac=5
n.grid=100
n=floor(runif(n.tsegm,min=10,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.ind.true=ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#generate theta
theta=matrix(NA,n.tsegm,n.ac)
for (i in 1:n.tsegm){
if (i< n.tsegm/2){ #pure thetas
theta[i,]=0
ind=sample(1:n.ac,size=1)
theta[i,ind]=1
}
if (i>= n.tsegm/2){
tmp=runif(n.ac)
theta[i,]=tmp/sum(tmp)
}
}
image(theta)
theta.true=theta
#distance decay parameter
phi.true=phi=0.1
#calculate probabilities associated with each n.ac
probs=matrix(NA,n.ac,n.grid)
for (i in 1:n.ac){
x2=(ac.coord$x[i]-grid.coord$x)^2
y2=(ac.coord$y[i]-grid.coord$y)^2
dist=sqrt(x2+y2)
tmp=exp(-phi*dist)
probs[i,]=tmp/sum(tmp)
}
#cluster membership and data
z=matrix(NA,n.tsegm,n.ac)
z.disagg=array(NA,dim=c(n.tsegm,n.grid,n.ac))
y=matrix(0,n.tsegm,n.grid)
for (i in 1:n.tsegm){
z[i,]=rmultinom(1,size=n[i],prob=theta[i,])
for (j in 1:n.ac){
z.disagg[i,,j]=rmultinom(1,size=z[i,j],prob=probs[j,])
y[i,]=y[i,]+z.disagg[i,,j]
}
}
z.true.disagg=z.disagg
image(y)
ntot=n.tsegm*n.ac*n.grid
z.estim=apply(res$z,c(1,3),sum)
z.true=apply(z.true.disagg,c(1,3),sum)
#parei aqui
ordem=numeric()
options(warn=0)
dim(z.estim)
dim(z.true)
i=1
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
tmp
ind=which(!is.na(tmp) & tmp==max(tmp))
ind
ind=which(!is.na(tmp) & tmp==max(tmp,na.rm=T))
ind
ordem=rep(NA,ncol(z.true))
options(warn=0)
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(!is.na(tmp) & tmp==max(tmp,na.rm=T))
print(max(tmp))
ordem[i]=ind
}
plot(z.estim[,ordem],z.true)
n.ac=20
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(possib.ac$x,possib.ac$y)
points(ac.coord[,1],ac.coord[,2],col='blue',cex=2)
points(ac.coord[ordem,1],ac.coord[ordem,2],col='purple',cex=1.5)
points(ac.coord.true$x,ac.coord.true$y,col='red',cex=0.8,pch=19)
n.ac=20
tmp=matrix(res$theta[ngibbs,-1,],n.tsegm,n.ac)
boxplot(tmp)
n.ac=20
tmp=matrix(res$theta[ngibbs-1,],n.tsegm,n.ac)
boxplot(tmp)
theta.estim=tmp[,ordem]
plot(theta.true,theta.estim)
rango=range(c(theta.true,theta.estim))
plot(theta.true,theta.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rm(list=ls(all=TRUE))
set.seed(111)
#basic setup
n.tsegm=400
n.ac=8
n.grid=100
n=floor(runif(n.tsegm,min=10,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.ind.true=ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#generate theta
theta=matrix(NA,n.tsegm,n.ac)
for (i in 1:n.tsegm){
if (i< n.tsegm/2){ #pure thetas
theta[i,]=0
ind=sample(1:n.ac,size=1)
theta[i,ind]=1
}
if (i>= n.tsegm/2){
tmp=runif(n.ac)
theta[i,]=tmp/sum(tmp)
}
}
image(theta)
theta.true=theta
#distance decay parameter
phi.true=phi=0.1
#calculate probabilities associated with each n.ac
probs=matrix(NA,n.ac,n.grid)
for (i in 1:n.ac){
x2=(ac.coord$x[i]-grid.coord$x)^2
y2=(ac.coord$y[i]-grid.coord$y)^2
dist=sqrt(x2+y2)
tmp=exp(-phi*dist)
probs[i,]=tmp/sum(tmp)
}
#cluster membership and data
z=matrix(NA,n.tsegm,n.ac)
z.disagg=array(NA,dim=c(n.tsegm,n.grid,n.ac))
y=matrix(0,n.tsegm,n.grid)
for (i in 1:n.tsegm){
z[i,]=rmultinom(1,size=n[i],prob=theta[i,])
for (j in 1:n.ac){
z.disagg[i,,j]=rmultinom(1,size=z[i,j],prob=probs[j,])
y[i,]=y[i,]+z.disagg[i,,j]
}
}
z.true.disagg=z.disagg
image(y)
setwd('U:\\GIT_models\\AC_mixed')
write.csv(y,'fake data.csv',row.names=F)
write.csv(grid.coord,'fake data grid.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(15)
#read important functions
setwd('U:\\GIT_models\\AC_mixed')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
res=gibbs.activity.center(dat=dat,grid.coord=grid.coord,n.ac=n.ac,
ac.coord.init=ac.coord.init,gamma1=gamma1,
possib.ac=possib.ac)
plot(res$logl,type='l')
set.seed(111)
#basic setup
n.tsegm=400
n.ac=8
n.grid=100
n=floor(runif(n.tsegm,min=10,max=900))
#spatial coordinates
grid.coord=data.frame(x=runif(n.grid,min=0,max=100),
y=runif(n.grid,min=0,max=100))
ac.ind.true=ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.true=ac.coord=grid.coord[ind,]
rangox=range(c(ac.coord$x,grid.coord$x))
rangoy=range(c(ac.coord$y,grid.coord$y))
plot(ac.coord$x,ac.coord$y,pch=19,xlim=rangox,ylim=rangoy)
points(grid.coord$x,grid.coord$y,col='red')
#generate theta
theta=matrix(NA,n.tsegm,n.ac)
for (i in 1:n.tsegm){
if (i< n.tsegm/2){ #pure thetas
theta[i,]=0
ind=sample(1:n.ac,size=1)
theta[i,ind]=1
}
if (i>= n.tsegm/2){
tmp=runif(n.ac)
theta[i,]=tmp/sum(tmp)
}
}
image(theta)
theta.true=theta
#distance decay parameter
phi.true=phi=0.1
#calculate probabilities associated with each n.ac
probs=matrix(NA,n.ac,n.grid)
for (i in 1:n.ac){
x2=(ac.coord$x[i]-grid.coord$x)^2
y2=(ac.coord$y[i]-grid.coord$y)^2
dist=sqrt(x2+y2)
tmp=exp(-phi*dist)
probs[i,]=tmp/sum(tmp)
}
#cluster membership and data
z=matrix(NA,n.tsegm,n.ac)
z.disagg=array(NA,dim=c(n.tsegm,n.grid,n.ac))
y=matrix(0,n.tsegm,n.grid)
for (i in 1:n.tsegm){
z[i,]=rmultinom(1,size=n[i],prob=theta[i,])
for (j in 1:n.ac){
z.disagg[i,,j]=rmultinom(1,size=z[i,j],prob=probs[j,])
y[i,]=y[i,]+z.disagg[i,,j]
}
}
z.true.disagg=z.disagg
image(y)
plot(res$phi,type='l')
abline(h=phi.true,col='red')
ntot=n.tsegm*n.ac*n.grid
z.estim=apply(res$z,c(1,3),sum)
z.true=apply(z.true.disagg,c(1,3),sum)
#find ordem
ordem=rep(NA,ncol(z.true))
options(warn=0)
for (i in 1:ncol(z.true)){
tmp=rep(NA,ncol(z.estim))
for (j in 1:ncol(z.estim)){
tmp[j]=cor(cbind(z.estim[,j],z.true[,i]))[1,2]
}
ind=which(!is.na(tmp) & tmp==max(tmp,na.rm=T))
print(max(tmp))
ordem[i]=ind
}
plot(z.estim[,ordem],z.true)
#--------------------
#look at theta
n.ac=20
tmp=matrix(res$theta[ngibbs-1,],n.tsegm,n.ac)
boxplot(tmp)
theta.estim=tmp[,ordem]
rango=range(c(theta.true,theta.estim))
plot(theta.true,theta.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
ac.coord=matrix(res$coord[ngibbs-1,],n.ac,2)
ac.coord[ordem,]
ac.coord.true
rango=range(c(ac.coord.true),ac.coord[ordem,])
plot(ac.coord.true$x,ac.coord[ordem,1],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
plot(ac.coord.true$y,ac.coord[ordem,2],xlim=rango,ylim=rango)
lines(rango,rango,col='red')
#--------------------
#look at spatial distribution
plot(possib.ac$x,possib.ac$y)
points(ac.coord[,1],ac.coord[,2],col='blue',cex=2)
points(ac.coord[ordem,1],ac.coord[ordem,2],col='purple',cex=1.5)
points(ac.coord.true$x,ac.coord.true$y,col='red',cex=0.8,pch=19)
ratios=c(seq(from=0.01,to=0.05,by=0.01),
seq(from=0.05,to=0.50,by=0.05))
ratios=unique(ratios)
length(ratios)
phi.values=-log(ratios)/(0.49*max(dist.mat))
rm(list=ls(all=TRUE))
set.seed(15)
#read important functions
setwd('U:\\GIT_models\\AC_mixed')
library('Rcpp')
sourceCpp('aux1.cpp')
source('gibbs sampler.R')
source('gibbs functions.R')
#get data
dat=read.csv('fake data.csv',as.is=T) #frequency of visitation in each location (column) for each time segment (row)
grid.coord=read.csv('fake data grid.csv',as.is=T) #geographical coordinates of locations
#basic setup
ngibbs=1000
nburn=ngibbs/2
n.ac=20
gamma1=0.1
#initial coordinates of activity centers (define this based on data instead of uninformative as below)
ind=sample(nrow(grid.coord),size=n.ac)
ac.coord.init=grid.coord[ind,]
#potential locations for activity centers (AC)
possib.ac=grid.coord #these don't have to be identical (i.e., we can define AC's on a coarser grid)
#run gibbs sampler
options(warn=2)
dat=data.matrix(dat)
#basic setup
n.tsegm=nrow(dat)
n.grid=nrow(grid.coord)
grid.coord=data.matrix(grid.coord)
n.possib.ac=nrow(possib.ac)
n=rowSums(dat)
#initial values
ac.ind=sample(n.grid,size=n.ac)
z=array(NA,dim=c(n.tsegm,n.grid,n.ac))
for (i in 1:n.tsegm){
for (j in 1:n.grid){
z[i,j,]=rmultinom(1,size=dat[i,j],prob=rep(1/n.ac,n.ac))
}
}
phi=0.0001 #distance decay parameter
theta=matrix(1/n.ac,n.tsegm,n.ac)
#matrices to store results
store.coord=matrix(NA,ngibbs,n.ac*2)
store.param=matrix(NA,ngibbs,1) #to store phi
store.logl=matrix(NA,ngibbs,1)
store.theta=matrix(NA,ngibbs,n.ac*n.tsegm)
#MH stuff
adaptMH=50
jump1=list(phi=0.2,ac.ind=rep(1,n.ac))
accept1=list(phi=0,ac.ind=rep(0,n.ac))
#pre-calculate distances between each potential AC location (possib.ac) and each actual location in our data (grid.coord)
dist.mat=GetDistance(AcCoord=data.matrix(possib.ac),GridCoord=data.matrix(grid.coord),
Ngrid=nrow(grid.coord), Nac=nrow(possib.ac))
ratios=c(seq(from=0.01,to=0.05,by=0.01),
seq(from=0.05,to=0.50,by=0.05))
ratios=unique(ratios)
phi.values=-log(ratios)/(0.49*max(dist.mat))
phi.values
